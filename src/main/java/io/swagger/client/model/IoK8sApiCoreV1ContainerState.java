/*
 * Kubernetes
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.13.5
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import io.swagger.client.model.IoK8sApiCoreV1ContainerStateRunning;
import io.swagger.client.model.IoK8sApiCoreV1ContainerStateTerminated;
import io.swagger.client.model.IoK8sApiCoreV1ContainerStateWaiting;
import java.io.IOException;

/**
 * ContainerState holds a possible state of container. Only one of its members may be specified. If none of them is specified, the default one is ContainerStateWaiting.
 */
@ApiModel(description = "ContainerState holds a possible state of container. Only one of its members may be specified. If none of them is specified, the default one is ContainerStateWaiting.")

public class IoK8sApiCoreV1ContainerState {
  @SerializedName("running")
  private IoK8sApiCoreV1ContainerStateRunning running = null;

  @SerializedName("terminated")
  private IoK8sApiCoreV1ContainerStateTerminated terminated = null;

  @SerializedName("waiting")
  private IoK8sApiCoreV1ContainerStateWaiting waiting = null;

  public IoK8sApiCoreV1ContainerState running(IoK8sApiCoreV1ContainerStateRunning running) {
    this.running = running;
    return this;
  }

   /**
   * Details about a running container
   * @return running
  **/
  @ApiModelProperty(value = "Details about a running container")
  public IoK8sApiCoreV1ContainerStateRunning getRunning() {
    return running;
  }

  public void setRunning(IoK8sApiCoreV1ContainerStateRunning running) {
    this.running = running;
  }

  public IoK8sApiCoreV1ContainerState terminated(IoK8sApiCoreV1ContainerStateTerminated terminated) {
    this.terminated = terminated;
    return this;
  }

   /**
   * Details about a terminated container
   * @return terminated
  **/
  @ApiModelProperty(value = "Details about a terminated container")
  public IoK8sApiCoreV1ContainerStateTerminated getTerminated() {
    return terminated;
  }

  public void setTerminated(IoK8sApiCoreV1ContainerStateTerminated terminated) {
    this.terminated = terminated;
  }

  public IoK8sApiCoreV1ContainerState waiting(IoK8sApiCoreV1ContainerStateWaiting waiting) {
    this.waiting = waiting;
    return this;
  }

   /**
   * Details about a waiting container
   * @return waiting
  **/
  @ApiModelProperty(value = "Details about a waiting container")
  public IoK8sApiCoreV1ContainerStateWaiting getWaiting() {
    return waiting;
  }

  public void setWaiting(IoK8sApiCoreV1ContainerStateWaiting waiting) {
    this.waiting = waiting;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IoK8sApiCoreV1ContainerState ioK8sApiCoreV1ContainerState = (IoK8sApiCoreV1ContainerState) o;
    return Objects.equals(this.running, ioK8sApiCoreV1ContainerState.running) &&
        Objects.equals(this.terminated, ioK8sApiCoreV1ContainerState.terminated) &&
        Objects.equals(this.waiting, ioK8sApiCoreV1ContainerState.waiting);
  }

  @Override
  public int hashCode() {
    return Objects.hash(running, terminated, waiting);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IoK8sApiCoreV1ContainerState {\n");
    
    sb.append("    running: ").append(toIndentedString(running)).append("\n");
    sb.append("    terminated: ").append(toIndentedString(terminated)).append("\n");
    sb.append("    waiting: ").append(toIndentedString(waiting)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

