/*
 * Kubernetes
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.13.5
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.IoK8sApiAuthorizationV1beta1LocalSubjectAccessReview;
import io.swagger.client.model.IoK8sApiAuthorizationV1beta1SelfSubjectAccessReview;
import io.swagger.client.model.IoK8sApiAuthorizationV1beta1SelfSubjectRulesReview;
import io.swagger.client.model.IoK8sApiAuthorizationV1beta1SubjectAccessReview;
import io.swagger.client.model.IoK8sApimachineryPkgApisMetaV1APIResourceList;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AuthorizationV1beta1Api {
    private ApiClient apiClient;

    public AuthorizationV1beta1Api() {
        this(Configuration.getDefaultApiClient());
    }

    public AuthorizationV1beta1Api(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for createAuthorizationV1beta1NamespacedLocalSubjectAccessReview
     * @param namespace object name and auth scope, such as for teams and projects (required)
     * @param body  (required)
     * @param dryRun When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed (optional)
     * @param includeUninitialized If IncludeUninitialized is specified, the object may be returned without completing initialization. (optional)
     * @param pretty If &#39;true&#39;, then the output is pretty printed. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createAuthorizationV1beta1NamespacedLocalSubjectAccessReviewCall(String namespace, IoK8sApiAuthorizationV1beta1LocalSubjectAccessReview body, String dryRun, Boolean includeUninitialized, String pretty, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/apis/authorization.k8s.io/v1beta1/namespaces/{namespace}/localsubjectaccessreviews"
            .replaceAll("\\{" + "namespace" + "\\}", apiClient.escapeString(namespace.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (dryRun != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("dryRun", dryRun));
        if (includeUninitialized != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("includeUninitialized", includeUninitialized));
        if (pretty != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pretty", pretty));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/yaml", "application/vnd.kubernetes.protobuf"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "*/*"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BearerToken" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createAuthorizationV1beta1NamespacedLocalSubjectAccessReviewValidateBeforeCall(String namespace, IoK8sApiAuthorizationV1beta1LocalSubjectAccessReview body, String dryRun, Boolean includeUninitialized, String pretty, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'namespace' is set
        if (namespace == null) {
            throw new ApiException("Missing the required parameter 'namespace' when calling createAuthorizationV1beta1NamespacedLocalSubjectAccessReview(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createAuthorizationV1beta1NamespacedLocalSubjectAccessReview(Async)");
        }
        

        com.squareup.okhttp.Call call = createAuthorizationV1beta1NamespacedLocalSubjectAccessReviewCall(namespace, body, dryRun, includeUninitialized, pretty, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * create a LocalSubjectAccessReview
     * @param namespace object name and auth scope, such as for teams and projects (required)
     * @param body  (required)
     * @param dryRun When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed (optional)
     * @param includeUninitialized If IncludeUninitialized is specified, the object may be returned without completing initialization. (optional)
     * @param pretty If &#39;true&#39;, then the output is pretty printed. (optional)
     * @return IoK8sApiAuthorizationV1beta1LocalSubjectAccessReview
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public IoK8sApiAuthorizationV1beta1LocalSubjectAccessReview createAuthorizationV1beta1NamespacedLocalSubjectAccessReview(String namespace, IoK8sApiAuthorizationV1beta1LocalSubjectAccessReview body, String dryRun, Boolean includeUninitialized, String pretty) throws ApiException {
        ApiResponse<IoK8sApiAuthorizationV1beta1LocalSubjectAccessReview> resp = createAuthorizationV1beta1NamespacedLocalSubjectAccessReviewWithHttpInfo(namespace, body, dryRun, includeUninitialized, pretty);
        return resp.getData();
    }

    /**
     * 
     * create a LocalSubjectAccessReview
     * @param namespace object name and auth scope, such as for teams and projects (required)
     * @param body  (required)
     * @param dryRun When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed (optional)
     * @param includeUninitialized If IncludeUninitialized is specified, the object may be returned without completing initialization. (optional)
     * @param pretty If &#39;true&#39;, then the output is pretty printed. (optional)
     * @return ApiResponse&lt;IoK8sApiAuthorizationV1beta1LocalSubjectAccessReview&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<IoK8sApiAuthorizationV1beta1LocalSubjectAccessReview> createAuthorizationV1beta1NamespacedLocalSubjectAccessReviewWithHttpInfo(String namespace, IoK8sApiAuthorizationV1beta1LocalSubjectAccessReview body, String dryRun, Boolean includeUninitialized, String pretty) throws ApiException {
        com.squareup.okhttp.Call call = createAuthorizationV1beta1NamespacedLocalSubjectAccessReviewValidateBeforeCall(namespace, body, dryRun, includeUninitialized, pretty, null, null);
        Type localVarReturnType = new TypeToken<IoK8sApiAuthorizationV1beta1LocalSubjectAccessReview>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * create a LocalSubjectAccessReview
     * @param namespace object name and auth scope, such as for teams and projects (required)
     * @param body  (required)
     * @param dryRun When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed (optional)
     * @param includeUninitialized If IncludeUninitialized is specified, the object may be returned without completing initialization. (optional)
     * @param pretty If &#39;true&#39;, then the output is pretty printed. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createAuthorizationV1beta1NamespacedLocalSubjectAccessReviewAsync(String namespace, IoK8sApiAuthorizationV1beta1LocalSubjectAccessReview body, String dryRun, Boolean includeUninitialized, String pretty, final ApiCallback<IoK8sApiAuthorizationV1beta1LocalSubjectAccessReview> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createAuthorizationV1beta1NamespacedLocalSubjectAccessReviewValidateBeforeCall(namespace, body, dryRun, includeUninitialized, pretty, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<IoK8sApiAuthorizationV1beta1LocalSubjectAccessReview>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createAuthorizationV1beta1SelfSubjectAccessReview
     * @param body  (required)
     * @param dryRun When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed (optional)
     * @param includeUninitialized If IncludeUninitialized is specified, the object may be returned without completing initialization. (optional)
     * @param pretty If &#39;true&#39;, then the output is pretty printed. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createAuthorizationV1beta1SelfSubjectAccessReviewCall(IoK8sApiAuthorizationV1beta1SelfSubjectAccessReview body, String dryRun, Boolean includeUninitialized, String pretty, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/apis/authorization.k8s.io/v1beta1/selfsubjectaccessreviews";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (dryRun != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("dryRun", dryRun));
        if (includeUninitialized != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("includeUninitialized", includeUninitialized));
        if (pretty != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pretty", pretty));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/yaml", "application/vnd.kubernetes.protobuf"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "*/*"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BearerToken" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createAuthorizationV1beta1SelfSubjectAccessReviewValidateBeforeCall(IoK8sApiAuthorizationV1beta1SelfSubjectAccessReview body, String dryRun, Boolean includeUninitialized, String pretty, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createAuthorizationV1beta1SelfSubjectAccessReview(Async)");
        }
        

        com.squareup.okhttp.Call call = createAuthorizationV1beta1SelfSubjectAccessReviewCall(body, dryRun, includeUninitialized, pretty, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * create a SelfSubjectAccessReview
     * @param body  (required)
     * @param dryRun When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed (optional)
     * @param includeUninitialized If IncludeUninitialized is specified, the object may be returned without completing initialization. (optional)
     * @param pretty If &#39;true&#39;, then the output is pretty printed. (optional)
     * @return IoK8sApiAuthorizationV1beta1SelfSubjectAccessReview
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public IoK8sApiAuthorizationV1beta1SelfSubjectAccessReview createAuthorizationV1beta1SelfSubjectAccessReview(IoK8sApiAuthorizationV1beta1SelfSubjectAccessReview body, String dryRun, Boolean includeUninitialized, String pretty) throws ApiException {
        ApiResponse<IoK8sApiAuthorizationV1beta1SelfSubjectAccessReview> resp = createAuthorizationV1beta1SelfSubjectAccessReviewWithHttpInfo(body, dryRun, includeUninitialized, pretty);
        return resp.getData();
    }

    /**
     * 
     * create a SelfSubjectAccessReview
     * @param body  (required)
     * @param dryRun When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed (optional)
     * @param includeUninitialized If IncludeUninitialized is specified, the object may be returned without completing initialization. (optional)
     * @param pretty If &#39;true&#39;, then the output is pretty printed. (optional)
     * @return ApiResponse&lt;IoK8sApiAuthorizationV1beta1SelfSubjectAccessReview&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<IoK8sApiAuthorizationV1beta1SelfSubjectAccessReview> createAuthorizationV1beta1SelfSubjectAccessReviewWithHttpInfo(IoK8sApiAuthorizationV1beta1SelfSubjectAccessReview body, String dryRun, Boolean includeUninitialized, String pretty) throws ApiException {
        com.squareup.okhttp.Call call = createAuthorizationV1beta1SelfSubjectAccessReviewValidateBeforeCall(body, dryRun, includeUninitialized, pretty, null, null);
        Type localVarReturnType = new TypeToken<IoK8sApiAuthorizationV1beta1SelfSubjectAccessReview>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * create a SelfSubjectAccessReview
     * @param body  (required)
     * @param dryRun When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed (optional)
     * @param includeUninitialized If IncludeUninitialized is specified, the object may be returned without completing initialization. (optional)
     * @param pretty If &#39;true&#39;, then the output is pretty printed. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createAuthorizationV1beta1SelfSubjectAccessReviewAsync(IoK8sApiAuthorizationV1beta1SelfSubjectAccessReview body, String dryRun, Boolean includeUninitialized, String pretty, final ApiCallback<IoK8sApiAuthorizationV1beta1SelfSubjectAccessReview> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createAuthorizationV1beta1SelfSubjectAccessReviewValidateBeforeCall(body, dryRun, includeUninitialized, pretty, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<IoK8sApiAuthorizationV1beta1SelfSubjectAccessReview>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createAuthorizationV1beta1SelfSubjectRulesReview
     * @param body  (required)
     * @param dryRun When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed (optional)
     * @param includeUninitialized If IncludeUninitialized is specified, the object may be returned without completing initialization. (optional)
     * @param pretty If &#39;true&#39;, then the output is pretty printed. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createAuthorizationV1beta1SelfSubjectRulesReviewCall(IoK8sApiAuthorizationV1beta1SelfSubjectRulesReview body, String dryRun, Boolean includeUninitialized, String pretty, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/apis/authorization.k8s.io/v1beta1/selfsubjectrulesreviews";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (dryRun != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("dryRun", dryRun));
        if (includeUninitialized != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("includeUninitialized", includeUninitialized));
        if (pretty != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pretty", pretty));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/yaml", "application/vnd.kubernetes.protobuf"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "*/*"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BearerToken" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createAuthorizationV1beta1SelfSubjectRulesReviewValidateBeforeCall(IoK8sApiAuthorizationV1beta1SelfSubjectRulesReview body, String dryRun, Boolean includeUninitialized, String pretty, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createAuthorizationV1beta1SelfSubjectRulesReview(Async)");
        }
        

        com.squareup.okhttp.Call call = createAuthorizationV1beta1SelfSubjectRulesReviewCall(body, dryRun, includeUninitialized, pretty, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * create a SelfSubjectRulesReview
     * @param body  (required)
     * @param dryRun When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed (optional)
     * @param includeUninitialized If IncludeUninitialized is specified, the object may be returned without completing initialization. (optional)
     * @param pretty If &#39;true&#39;, then the output is pretty printed. (optional)
     * @return IoK8sApiAuthorizationV1beta1SelfSubjectRulesReview
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public IoK8sApiAuthorizationV1beta1SelfSubjectRulesReview createAuthorizationV1beta1SelfSubjectRulesReview(IoK8sApiAuthorizationV1beta1SelfSubjectRulesReview body, String dryRun, Boolean includeUninitialized, String pretty) throws ApiException {
        ApiResponse<IoK8sApiAuthorizationV1beta1SelfSubjectRulesReview> resp = createAuthorizationV1beta1SelfSubjectRulesReviewWithHttpInfo(body, dryRun, includeUninitialized, pretty);
        return resp.getData();
    }

    /**
     * 
     * create a SelfSubjectRulesReview
     * @param body  (required)
     * @param dryRun When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed (optional)
     * @param includeUninitialized If IncludeUninitialized is specified, the object may be returned without completing initialization. (optional)
     * @param pretty If &#39;true&#39;, then the output is pretty printed. (optional)
     * @return ApiResponse&lt;IoK8sApiAuthorizationV1beta1SelfSubjectRulesReview&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<IoK8sApiAuthorizationV1beta1SelfSubjectRulesReview> createAuthorizationV1beta1SelfSubjectRulesReviewWithHttpInfo(IoK8sApiAuthorizationV1beta1SelfSubjectRulesReview body, String dryRun, Boolean includeUninitialized, String pretty) throws ApiException {
        com.squareup.okhttp.Call call = createAuthorizationV1beta1SelfSubjectRulesReviewValidateBeforeCall(body, dryRun, includeUninitialized, pretty, null, null);
        Type localVarReturnType = new TypeToken<IoK8sApiAuthorizationV1beta1SelfSubjectRulesReview>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * create a SelfSubjectRulesReview
     * @param body  (required)
     * @param dryRun When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed (optional)
     * @param includeUninitialized If IncludeUninitialized is specified, the object may be returned without completing initialization. (optional)
     * @param pretty If &#39;true&#39;, then the output is pretty printed. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createAuthorizationV1beta1SelfSubjectRulesReviewAsync(IoK8sApiAuthorizationV1beta1SelfSubjectRulesReview body, String dryRun, Boolean includeUninitialized, String pretty, final ApiCallback<IoK8sApiAuthorizationV1beta1SelfSubjectRulesReview> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createAuthorizationV1beta1SelfSubjectRulesReviewValidateBeforeCall(body, dryRun, includeUninitialized, pretty, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<IoK8sApiAuthorizationV1beta1SelfSubjectRulesReview>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createAuthorizationV1beta1SubjectAccessReview
     * @param body  (required)
     * @param dryRun When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed (optional)
     * @param includeUninitialized If IncludeUninitialized is specified, the object may be returned without completing initialization. (optional)
     * @param pretty If &#39;true&#39;, then the output is pretty printed. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createAuthorizationV1beta1SubjectAccessReviewCall(IoK8sApiAuthorizationV1beta1SubjectAccessReview body, String dryRun, Boolean includeUninitialized, String pretty, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/apis/authorization.k8s.io/v1beta1/subjectaccessreviews";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (dryRun != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("dryRun", dryRun));
        if (includeUninitialized != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("includeUninitialized", includeUninitialized));
        if (pretty != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pretty", pretty));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/yaml", "application/vnd.kubernetes.protobuf"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "*/*"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BearerToken" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createAuthorizationV1beta1SubjectAccessReviewValidateBeforeCall(IoK8sApiAuthorizationV1beta1SubjectAccessReview body, String dryRun, Boolean includeUninitialized, String pretty, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createAuthorizationV1beta1SubjectAccessReview(Async)");
        }
        

        com.squareup.okhttp.Call call = createAuthorizationV1beta1SubjectAccessReviewCall(body, dryRun, includeUninitialized, pretty, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * create a SubjectAccessReview
     * @param body  (required)
     * @param dryRun When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed (optional)
     * @param includeUninitialized If IncludeUninitialized is specified, the object may be returned without completing initialization. (optional)
     * @param pretty If &#39;true&#39;, then the output is pretty printed. (optional)
     * @return IoK8sApiAuthorizationV1beta1SubjectAccessReview
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public IoK8sApiAuthorizationV1beta1SubjectAccessReview createAuthorizationV1beta1SubjectAccessReview(IoK8sApiAuthorizationV1beta1SubjectAccessReview body, String dryRun, Boolean includeUninitialized, String pretty) throws ApiException {
        ApiResponse<IoK8sApiAuthorizationV1beta1SubjectAccessReview> resp = createAuthorizationV1beta1SubjectAccessReviewWithHttpInfo(body, dryRun, includeUninitialized, pretty);
        return resp.getData();
    }

    /**
     * 
     * create a SubjectAccessReview
     * @param body  (required)
     * @param dryRun When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed (optional)
     * @param includeUninitialized If IncludeUninitialized is specified, the object may be returned without completing initialization. (optional)
     * @param pretty If &#39;true&#39;, then the output is pretty printed. (optional)
     * @return ApiResponse&lt;IoK8sApiAuthorizationV1beta1SubjectAccessReview&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<IoK8sApiAuthorizationV1beta1SubjectAccessReview> createAuthorizationV1beta1SubjectAccessReviewWithHttpInfo(IoK8sApiAuthorizationV1beta1SubjectAccessReview body, String dryRun, Boolean includeUninitialized, String pretty) throws ApiException {
        com.squareup.okhttp.Call call = createAuthorizationV1beta1SubjectAccessReviewValidateBeforeCall(body, dryRun, includeUninitialized, pretty, null, null);
        Type localVarReturnType = new TypeToken<IoK8sApiAuthorizationV1beta1SubjectAccessReview>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * create a SubjectAccessReview
     * @param body  (required)
     * @param dryRun When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed (optional)
     * @param includeUninitialized If IncludeUninitialized is specified, the object may be returned without completing initialization. (optional)
     * @param pretty If &#39;true&#39;, then the output is pretty printed. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createAuthorizationV1beta1SubjectAccessReviewAsync(IoK8sApiAuthorizationV1beta1SubjectAccessReview body, String dryRun, Boolean includeUninitialized, String pretty, final ApiCallback<IoK8sApiAuthorizationV1beta1SubjectAccessReview> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createAuthorizationV1beta1SubjectAccessReviewValidateBeforeCall(body, dryRun, includeUninitialized, pretty, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<IoK8sApiAuthorizationV1beta1SubjectAccessReview>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getAuthorizationV1beta1APIResources
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAuthorizationV1beta1APIResourcesCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/apis/authorization.k8s.io/v1beta1/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/yaml", "application/vnd.kubernetes.protobuf"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "application/yaml", "application/vnd.kubernetes.protobuf"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BearerToken" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAuthorizationV1beta1APIResourcesValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getAuthorizationV1beta1APIResourcesCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * get available resources
     * @return IoK8sApimachineryPkgApisMetaV1APIResourceList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public IoK8sApimachineryPkgApisMetaV1APIResourceList getAuthorizationV1beta1APIResources() throws ApiException {
        ApiResponse<IoK8sApimachineryPkgApisMetaV1APIResourceList> resp = getAuthorizationV1beta1APIResourcesWithHttpInfo();
        return resp.getData();
    }

    /**
     * 
     * get available resources
     * @return ApiResponse&lt;IoK8sApimachineryPkgApisMetaV1APIResourceList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<IoK8sApimachineryPkgApisMetaV1APIResourceList> getAuthorizationV1beta1APIResourcesWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = getAuthorizationV1beta1APIResourcesValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<IoK8sApimachineryPkgApisMetaV1APIResourceList>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * get available resources
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAuthorizationV1beta1APIResourcesAsync(final ApiCallback<IoK8sApimachineryPkgApisMetaV1APIResourceList> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAuthorizationV1beta1APIResourcesValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<IoK8sApimachineryPkgApisMetaV1APIResourceList>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
