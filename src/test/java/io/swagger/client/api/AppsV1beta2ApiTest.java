/*
 * Kubernetes
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.13.5
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiException;
import io.swagger.client.model.IoK8sApiAppsV1beta2ControllerRevision;
import io.swagger.client.model.IoK8sApiAppsV1beta2ControllerRevisionList;
import io.swagger.client.model.IoK8sApiAppsV1beta2DaemonSet;
import io.swagger.client.model.IoK8sApiAppsV1beta2DaemonSetList;
import io.swagger.client.model.IoK8sApiAppsV1beta2Deployment;
import io.swagger.client.model.IoK8sApiAppsV1beta2DeploymentList;
import io.swagger.client.model.IoK8sApiAppsV1beta2ReplicaSet;
import io.swagger.client.model.IoK8sApiAppsV1beta2ReplicaSetList;
import io.swagger.client.model.IoK8sApiAppsV1beta2Scale;
import io.swagger.client.model.IoK8sApiAppsV1beta2StatefulSet;
import io.swagger.client.model.IoK8sApiAppsV1beta2StatefulSetList;
import io.swagger.client.model.IoK8sApimachineryPkgApisMetaV1APIResourceList;
import io.swagger.client.model.IoK8sApimachineryPkgApisMetaV1DeleteOptions;
import io.swagger.client.model.IoK8sApimachineryPkgApisMetaV1Patch;
import io.swagger.client.model.IoK8sApimachineryPkgApisMetaV1Status;
import io.swagger.client.model.IoK8sApimachineryPkgApisMetaV1WatchEvent;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for AppsV1beta2Api
 */
@Ignore
public class AppsV1beta2ApiTest {

    private final AppsV1beta2Api api = new AppsV1beta2Api();

    
    /**
     * 
     *
     * create a ControllerRevision
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createAppsV1beta2NamespacedControllerRevisionTest() throws ApiException {
        String namespace = null;
        IoK8sApiAppsV1beta2ControllerRevision body = null;
        Boolean includeUninitialized = null;
        String pretty = null;
        String dryRun = null;
        IoK8sApiAppsV1beta2ControllerRevision response = api.createAppsV1beta2NamespacedControllerRevision(namespace, body, includeUninitialized, pretty, dryRun);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * create a DaemonSet
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createAppsV1beta2NamespacedDaemonSetTest() throws ApiException {
        String namespace = null;
        IoK8sApiAppsV1beta2DaemonSet body = null;
        Boolean includeUninitialized = null;
        String pretty = null;
        String dryRun = null;
        IoK8sApiAppsV1beta2DaemonSet response = api.createAppsV1beta2NamespacedDaemonSet(namespace, body, includeUninitialized, pretty, dryRun);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * create a Deployment
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createAppsV1beta2NamespacedDeploymentTest() throws ApiException {
        String namespace = null;
        IoK8sApiAppsV1beta2Deployment body = null;
        Boolean includeUninitialized = null;
        String pretty = null;
        String dryRun = null;
        IoK8sApiAppsV1beta2Deployment response = api.createAppsV1beta2NamespacedDeployment(namespace, body, includeUninitialized, pretty, dryRun);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * create a ReplicaSet
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createAppsV1beta2NamespacedReplicaSetTest() throws ApiException {
        String namespace = null;
        IoK8sApiAppsV1beta2ReplicaSet body = null;
        Boolean includeUninitialized = null;
        String pretty = null;
        String dryRun = null;
        IoK8sApiAppsV1beta2ReplicaSet response = api.createAppsV1beta2NamespacedReplicaSet(namespace, body, includeUninitialized, pretty, dryRun);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * create a StatefulSet
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createAppsV1beta2NamespacedStatefulSetTest() throws ApiException {
        String namespace = null;
        IoK8sApiAppsV1beta2StatefulSet body = null;
        Boolean includeUninitialized = null;
        String pretty = null;
        String dryRun = null;
        IoK8sApiAppsV1beta2StatefulSet response = api.createAppsV1beta2NamespacedStatefulSet(namespace, body, includeUninitialized, pretty, dryRun);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete collection of ControllerRevision
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteAppsV1beta2CollectionNamespacedControllerRevisionTest() throws ApiException {
        String namespace = null;
        Boolean includeUninitialized = null;
        String pretty = null;
        String _continue = null;
        String fieldSelector = null;
        String labelSelector = null;
        Integer limit = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoK8sApimachineryPkgApisMetaV1Status response = api.deleteAppsV1beta2CollectionNamespacedControllerRevision(namespace, includeUninitialized, pretty, _continue, fieldSelector, labelSelector, limit, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete collection of DaemonSet
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteAppsV1beta2CollectionNamespacedDaemonSetTest() throws ApiException {
        String namespace = null;
        Boolean includeUninitialized = null;
        String pretty = null;
        String _continue = null;
        String fieldSelector = null;
        String labelSelector = null;
        Integer limit = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoK8sApimachineryPkgApisMetaV1Status response = api.deleteAppsV1beta2CollectionNamespacedDaemonSet(namespace, includeUninitialized, pretty, _continue, fieldSelector, labelSelector, limit, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete collection of Deployment
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteAppsV1beta2CollectionNamespacedDeploymentTest() throws ApiException {
        String namespace = null;
        Boolean includeUninitialized = null;
        String pretty = null;
        String _continue = null;
        String fieldSelector = null;
        String labelSelector = null;
        Integer limit = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoK8sApimachineryPkgApisMetaV1Status response = api.deleteAppsV1beta2CollectionNamespacedDeployment(namespace, includeUninitialized, pretty, _continue, fieldSelector, labelSelector, limit, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete collection of ReplicaSet
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteAppsV1beta2CollectionNamespacedReplicaSetTest() throws ApiException {
        String namespace = null;
        Boolean includeUninitialized = null;
        String pretty = null;
        String _continue = null;
        String fieldSelector = null;
        String labelSelector = null;
        Integer limit = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoK8sApimachineryPkgApisMetaV1Status response = api.deleteAppsV1beta2CollectionNamespacedReplicaSet(namespace, includeUninitialized, pretty, _continue, fieldSelector, labelSelector, limit, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete collection of StatefulSet
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteAppsV1beta2CollectionNamespacedStatefulSetTest() throws ApiException {
        String namespace = null;
        Boolean includeUninitialized = null;
        String pretty = null;
        String _continue = null;
        String fieldSelector = null;
        String labelSelector = null;
        Integer limit = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoK8sApimachineryPkgApisMetaV1Status response = api.deleteAppsV1beta2CollectionNamespacedStatefulSet(namespace, includeUninitialized, pretty, _continue, fieldSelector, labelSelector, limit, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete a ControllerRevision
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteAppsV1beta2NamespacedControllerRevisionTest() throws ApiException {
        String name = null;
        String namespace = null;
        String pretty = null;
        IoK8sApimachineryPkgApisMetaV1DeleteOptions body = null;
        String dryRun = null;
        Integer gracePeriodSeconds = null;
        Boolean orphanDependents = null;
        String propagationPolicy = null;
        IoK8sApimachineryPkgApisMetaV1Status response = api.deleteAppsV1beta2NamespacedControllerRevision(name, namespace, pretty, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete a DaemonSet
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteAppsV1beta2NamespacedDaemonSetTest() throws ApiException {
        String name = null;
        String namespace = null;
        String pretty = null;
        IoK8sApimachineryPkgApisMetaV1DeleteOptions body = null;
        String dryRun = null;
        Integer gracePeriodSeconds = null;
        Boolean orphanDependents = null;
        String propagationPolicy = null;
        IoK8sApimachineryPkgApisMetaV1Status response = api.deleteAppsV1beta2NamespacedDaemonSet(name, namespace, pretty, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete a Deployment
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteAppsV1beta2NamespacedDeploymentTest() throws ApiException {
        String name = null;
        String namespace = null;
        String pretty = null;
        IoK8sApimachineryPkgApisMetaV1DeleteOptions body = null;
        String dryRun = null;
        Integer gracePeriodSeconds = null;
        Boolean orphanDependents = null;
        String propagationPolicy = null;
        IoK8sApimachineryPkgApisMetaV1Status response = api.deleteAppsV1beta2NamespacedDeployment(name, namespace, pretty, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete a ReplicaSet
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteAppsV1beta2NamespacedReplicaSetTest() throws ApiException {
        String name = null;
        String namespace = null;
        String pretty = null;
        IoK8sApimachineryPkgApisMetaV1DeleteOptions body = null;
        String dryRun = null;
        Integer gracePeriodSeconds = null;
        Boolean orphanDependents = null;
        String propagationPolicy = null;
        IoK8sApimachineryPkgApisMetaV1Status response = api.deleteAppsV1beta2NamespacedReplicaSet(name, namespace, pretty, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete a StatefulSet
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteAppsV1beta2NamespacedStatefulSetTest() throws ApiException {
        String name = null;
        String namespace = null;
        String pretty = null;
        IoK8sApimachineryPkgApisMetaV1DeleteOptions body = null;
        String dryRun = null;
        Integer gracePeriodSeconds = null;
        Boolean orphanDependents = null;
        String propagationPolicy = null;
        IoK8sApimachineryPkgApisMetaV1Status response = api.deleteAppsV1beta2NamespacedStatefulSet(name, namespace, pretty, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * get available resources
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAppsV1beta2APIResourcesTest() throws ApiException {
        IoK8sApimachineryPkgApisMetaV1APIResourceList response = api.getAppsV1beta2APIResources();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list or watch objects of kind ControllerRevision
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listAppsV1beta2ControllerRevisionForAllNamespacesTest() throws ApiException {
        String _continue = null;
        String fieldSelector = null;
        Boolean includeUninitialized = null;
        String labelSelector = null;
        Integer limit = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoK8sApiAppsV1beta2ControllerRevisionList response = api.listAppsV1beta2ControllerRevisionForAllNamespaces(_continue, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list or watch objects of kind DaemonSet
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listAppsV1beta2DaemonSetForAllNamespacesTest() throws ApiException {
        String _continue = null;
        String fieldSelector = null;
        Boolean includeUninitialized = null;
        String labelSelector = null;
        Integer limit = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoK8sApiAppsV1beta2DaemonSetList response = api.listAppsV1beta2DaemonSetForAllNamespaces(_continue, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list or watch objects of kind Deployment
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listAppsV1beta2DeploymentForAllNamespacesTest() throws ApiException {
        String _continue = null;
        String fieldSelector = null;
        Boolean includeUninitialized = null;
        String labelSelector = null;
        Integer limit = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoK8sApiAppsV1beta2DeploymentList response = api.listAppsV1beta2DeploymentForAllNamespaces(_continue, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list or watch objects of kind ControllerRevision
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listAppsV1beta2NamespacedControllerRevisionTest() throws ApiException {
        String namespace = null;
        Boolean includeUninitialized = null;
        String pretty = null;
        String _continue = null;
        String fieldSelector = null;
        String labelSelector = null;
        Integer limit = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoK8sApiAppsV1beta2ControllerRevisionList response = api.listAppsV1beta2NamespacedControllerRevision(namespace, includeUninitialized, pretty, _continue, fieldSelector, labelSelector, limit, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list or watch objects of kind DaemonSet
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listAppsV1beta2NamespacedDaemonSetTest() throws ApiException {
        String namespace = null;
        Boolean includeUninitialized = null;
        String pretty = null;
        String _continue = null;
        String fieldSelector = null;
        String labelSelector = null;
        Integer limit = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoK8sApiAppsV1beta2DaemonSetList response = api.listAppsV1beta2NamespacedDaemonSet(namespace, includeUninitialized, pretty, _continue, fieldSelector, labelSelector, limit, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list or watch objects of kind Deployment
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listAppsV1beta2NamespacedDeploymentTest() throws ApiException {
        String namespace = null;
        Boolean includeUninitialized = null;
        String pretty = null;
        String _continue = null;
        String fieldSelector = null;
        String labelSelector = null;
        Integer limit = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoK8sApiAppsV1beta2DeploymentList response = api.listAppsV1beta2NamespacedDeployment(namespace, includeUninitialized, pretty, _continue, fieldSelector, labelSelector, limit, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list or watch objects of kind ReplicaSet
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listAppsV1beta2NamespacedReplicaSetTest() throws ApiException {
        String namespace = null;
        Boolean includeUninitialized = null;
        String pretty = null;
        String _continue = null;
        String fieldSelector = null;
        String labelSelector = null;
        Integer limit = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoK8sApiAppsV1beta2ReplicaSetList response = api.listAppsV1beta2NamespacedReplicaSet(namespace, includeUninitialized, pretty, _continue, fieldSelector, labelSelector, limit, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list or watch objects of kind StatefulSet
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listAppsV1beta2NamespacedStatefulSetTest() throws ApiException {
        String namespace = null;
        Boolean includeUninitialized = null;
        String pretty = null;
        String _continue = null;
        String fieldSelector = null;
        String labelSelector = null;
        Integer limit = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoK8sApiAppsV1beta2StatefulSetList response = api.listAppsV1beta2NamespacedStatefulSet(namespace, includeUninitialized, pretty, _continue, fieldSelector, labelSelector, limit, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list or watch objects of kind ReplicaSet
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listAppsV1beta2ReplicaSetForAllNamespacesTest() throws ApiException {
        String _continue = null;
        String fieldSelector = null;
        Boolean includeUninitialized = null;
        String labelSelector = null;
        Integer limit = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoK8sApiAppsV1beta2ReplicaSetList response = api.listAppsV1beta2ReplicaSetForAllNamespaces(_continue, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list or watch objects of kind StatefulSet
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listAppsV1beta2StatefulSetForAllNamespacesTest() throws ApiException {
        String _continue = null;
        String fieldSelector = null;
        Boolean includeUninitialized = null;
        String labelSelector = null;
        Integer limit = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoK8sApiAppsV1beta2StatefulSetList response = api.listAppsV1beta2StatefulSetForAllNamespaces(_continue, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update the specified ControllerRevision
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchAppsV1beta2NamespacedControllerRevisionTest() throws ApiException {
        String name = null;
        String namespace = null;
        IoK8sApimachineryPkgApisMetaV1Patch body = null;
        String pretty = null;
        String dryRun = null;
        IoK8sApiAppsV1beta2ControllerRevision response = api.patchAppsV1beta2NamespacedControllerRevision(name, namespace, body, pretty, dryRun);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update the specified DaemonSet
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchAppsV1beta2NamespacedDaemonSetTest() throws ApiException {
        String name = null;
        String namespace = null;
        IoK8sApimachineryPkgApisMetaV1Patch body = null;
        String pretty = null;
        String dryRun = null;
        IoK8sApiAppsV1beta2DaemonSet response = api.patchAppsV1beta2NamespacedDaemonSet(name, namespace, body, pretty, dryRun);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update status of the specified DaemonSet
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchAppsV1beta2NamespacedDaemonSetStatusTest() throws ApiException {
        String name = null;
        String namespace = null;
        IoK8sApimachineryPkgApisMetaV1Patch body = null;
        String pretty = null;
        String dryRun = null;
        IoK8sApiAppsV1beta2DaemonSet response = api.patchAppsV1beta2NamespacedDaemonSetStatus(name, namespace, body, pretty, dryRun);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update the specified Deployment
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchAppsV1beta2NamespacedDeploymentTest() throws ApiException {
        String name = null;
        String namespace = null;
        IoK8sApimachineryPkgApisMetaV1Patch body = null;
        String pretty = null;
        String dryRun = null;
        IoK8sApiAppsV1beta2Deployment response = api.patchAppsV1beta2NamespacedDeployment(name, namespace, body, pretty, dryRun);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update scale of the specified Deployment
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchAppsV1beta2NamespacedDeploymentScaleTest() throws ApiException {
        String name = null;
        String namespace = null;
        IoK8sApimachineryPkgApisMetaV1Patch body = null;
        String pretty = null;
        String dryRun = null;
        IoK8sApiAppsV1beta2Scale response = api.patchAppsV1beta2NamespacedDeploymentScale(name, namespace, body, pretty, dryRun);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update status of the specified Deployment
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchAppsV1beta2NamespacedDeploymentStatusTest() throws ApiException {
        String name = null;
        String namespace = null;
        IoK8sApimachineryPkgApisMetaV1Patch body = null;
        String pretty = null;
        String dryRun = null;
        IoK8sApiAppsV1beta2Deployment response = api.patchAppsV1beta2NamespacedDeploymentStatus(name, namespace, body, pretty, dryRun);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update the specified ReplicaSet
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchAppsV1beta2NamespacedReplicaSetTest() throws ApiException {
        String name = null;
        String namespace = null;
        IoK8sApimachineryPkgApisMetaV1Patch body = null;
        String pretty = null;
        String dryRun = null;
        IoK8sApiAppsV1beta2ReplicaSet response = api.patchAppsV1beta2NamespacedReplicaSet(name, namespace, body, pretty, dryRun);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update scale of the specified ReplicaSet
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchAppsV1beta2NamespacedReplicaSetScaleTest() throws ApiException {
        String name = null;
        String namespace = null;
        IoK8sApimachineryPkgApisMetaV1Patch body = null;
        String pretty = null;
        String dryRun = null;
        IoK8sApiAppsV1beta2Scale response = api.patchAppsV1beta2NamespacedReplicaSetScale(name, namespace, body, pretty, dryRun);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update status of the specified ReplicaSet
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchAppsV1beta2NamespacedReplicaSetStatusTest() throws ApiException {
        String name = null;
        String namespace = null;
        IoK8sApimachineryPkgApisMetaV1Patch body = null;
        String pretty = null;
        String dryRun = null;
        IoK8sApiAppsV1beta2ReplicaSet response = api.patchAppsV1beta2NamespacedReplicaSetStatus(name, namespace, body, pretty, dryRun);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update the specified StatefulSet
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchAppsV1beta2NamespacedStatefulSetTest() throws ApiException {
        String name = null;
        String namespace = null;
        IoK8sApimachineryPkgApisMetaV1Patch body = null;
        String pretty = null;
        String dryRun = null;
        IoK8sApiAppsV1beta2StatefulSet response = api.patchAppsV1beta2NamespacedStatefulSet(name, namespace, body, pretty, dryRun);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update scale of the specified StatefulSet
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchAppsV1beta2NamespacedStatefulSetScaleTest() throws ApiException {
        String name = null;
        String namespace = null;
        IoK8sApimachineryPkgApisMetaV1Patch body = null;
        String pretty = null;
        String dryRun = null;
        IoK8sApiAppsV1beta2Scale response = api.patchAppsV1beta2NamespacedStatefulSetScale(name, namespace, body, pretty, dryRun);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update status of the specified StatefulSet
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchAppsV1beta2NamespacedStatefulSetStatusTest() throws ApiException {
        String name = null;
        String namespace = null;
        IoK8sApimachineryPkgApisMetaV1Patch body = null;
        String pretty = null;
        String dryRun = null;
        IoK8sApiAppsV1beta2StatefulSet response = api.patchAppsV1beta2NamespacedStatefulSetStatus(name, namespace, body, pretty, dryRun);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read the specified ControllerRevision
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readAppsV1beta2NamespacedControllerRevisionTest() throws ApiException {
        String name = null;
        String namespace = null;
        String pretty = null;
        Boolean exact = null;
        Boolean export = null;
        IoK8sApiAppsV1beta2ControllerRevision response = api.readAppsV1beta2NamespacedControllerRevision(name, namespace, pretty, exact, export);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read the specified DaemonSet
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readAppsV1beta2NamespacedDaemonSetTest() throws ApiException {
        String name = null;
        String namespace = null;
        String pretty = null;
        Boolean exact = null;
        Boolean export = null;
        IoK8sApiAppsV1beta2DaemonSet response = api.readAppsV1beta2NamespacedDaemonSet(name, namespace, pretty, exact, export);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read status of the specified DaemonSet
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readAppsV1beta2NamespacedDaemonSetStatusTest() throws ApiException {
        String name = null;
        String namespace = null;
        String pretty = null;
        IoK8sApiAppsV1beta2DaemonSet response = api.readAppsV1beta2NamespacedDaemonSetStatus(name, namespace, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read the specified Deployment
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readAppsV1beta2NamespacedDeploymentTest() throws ApiException {
        String name = null;
        String namespace = null;
        String pretty = null;
        Boolean exact = null;
        Boolean export = null;
        IoK8sApiAppsV1beta2Deployment response = api.readAppsV1beta2NamespacedDeployment(name, namespace, pretty, exact, export);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read scale of the specified Deployment
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readAppsV1beta2NamespacedDeploymentScaleTest() throws ApiException {
        String name = null;
        String namespace = null;
        String pretty = null;
        IoK8sApiAppsV1beta2Scale response = api.readAppsV1beta2NamespacedDeploymentScale(name, namespace, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read status of the specified Deployment
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readAppsV1beta2NamespacedDeploymentStatusTest() throws ApiException {
        String name = null;
        String namespace = null;
        String pretty = null;
        IoK8sApiAppsV1beta2Deployment response = api.readAppsV1beta2NamespacedDeploymentStatus(name, namespace, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read the specified ReplicaSet
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readAppsV1beta2NamespacedReplicaSetTest() throws ApiException {
        String name = null;
        String namespace = null;
        String pretty = null;
        Boolean exact = null;
        Boolean export = null;
        IoK8sApiAppsV1beta2ReplicaSet response = api.readAppsV1beta2NamespacedReplicaSet(name, namespace, pretty, exact, export);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read scale of the specified ReplicaSet
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readAppsV1beta2NamespacedReplicaSetScaleTest() throws ApiException {
        String name = null;
        String namespace = null;
        String pretty = null;
        IoK8sApiAppsV1beta2Scale response = api.readAppsV1beta2NamespacedReplicaSetScale(name, namespace, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read status of the specified ReplicaSet
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readAppsV1beta2NamespacedReplicaSetStatusTest() throws ApiException {
        String name = null;
        String namespace = null;
        String pretty = null;
        IoK8sApiAppsV1beta2ReplicaSet response = api.readAppsV1beta2NamespacedReplicaSetStatus(name, namespace, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read the specified StatefulSet
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readAppsV1beta2NamespacedStatefulSetTest() throws ApiException {
        String name = null;
        String namespace = null;
        String pretty = null;
        Boolean exact = null;
        Boolean export = null;
        IoK8sApiAppsV1beta2StatefulSet response = api.readAppsV1beta2NamespacedStatefulSet(name, namespace, pretty, exact, export);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read scale of the specified StatefulSet
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readAppsV1beta2NamespacedStatefulSetScaleTest() throws ApiException {
        String name = null;
        String namespace = null;
        String pretty = null;
        IoK8sApiAppsV1beta2Scale response = api.readAppsV1beta2NamespacedStatefulSetScale(name, namespace, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read status of the specified StatefulSet
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readAppsV1beta2NamespacedStatefulSetStatusTest() throws ApiException {
        String name = null;
        String namespace = null;
        String pretty = null;
        IoK8sApiAppsV1beta2StatefulSet response = api.readAppsV1beta2NamespacedStatefulSetStatus(name, namespace, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace the specified ControllerRevision
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceAppsV1beta2NamespacedControllerRevisionTest() throws ApiException {
        String name = null;
        String namespace = null;
        IoK8sApiAppsV1beta2ControllerRevision body = null;
        String pretty = null;
        String dryRun = null;
        IoK8sApiAppsV1beta2ControllerRevision response = api.replaceAppsV1beta2NamespacedControllerRevision(name, namespace, body, pretty, dryRun);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace the specified DaemonSet
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceAppsV1beta2NamespacedDaemonSetTest() throws ApiException {
        String name = null;
        String namespace = null;
        IoK8sApiAppsV1beta2DaemonSet body = null;
        String pretty = null;
        String dryRun = null;
        IoK8sApiAppsV1beta2DaemonSet response = api.replaceAppsV1beta2NamespacedDaemonSet(name, namespace, body, pretty, dryRun);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace status of the specified DaemonSet
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceAppsV1beta2NamespacedDaemonSetStatusTest() throws ApiException {
        String name = null;
        String namespace = null;
        IoK8sApiAppsV1beta2DaemonSet body = null;
        String pretty = null;
        String dryRun = null;
        IoK8sApiAppsV1beta2DaemonSet response = api.replaceAppsV1beta2NamespacedDaemonSetStatus(name, namespace, body, pretty, dryRun);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace the specified Deployment
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceAppsV1beta2NamespacedDeploymentTest() throws ApiException {
        String name = null;
        String namespace = null;
        IoK8sApiAppsV1beta2Deployment body = null;
        String pretty = null;
        String dryRun = null;
        IoK8sApiAppsV1beta2Deployment response = api.replaceAppsV1beta2NamespacedDeployment(name, namespace, body, pretty, dryRun);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace scale of the specified Deployment
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceAppsV1beta2NamespacedDeploymentScaleTest() throws ApiException {
        String name = null;
        String namespace = null;
        IoK8sApiAppsV1beta2Scale body = null;
        String pretty = null;
        String dryRun = null;
        IoK8sApiAppsV1beta2Scale response = api.replaceAppsV1beta2NamespacedDeploymentScale(name, namespace, body, pretty, dryRun);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace status of the specified Deployment
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceAppsV1beta2NamespacedDeploymentStatusTest() throws ApiException {
        String name = null;
        String namespace = null;
        IoK8sApiAppsV1beta2Deployment body = null;
        String pretty = null;
        String dryRun = null;
        IoK8sApiAppsV1beta2Deployment response = api.replaceAppsV1beta2NamespacedDeploymentStatus(name, namespace, body, pretty, dryRun);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace the specified ReplicaSet
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceAppsV1beta2NamespacedReplicaSetTest() throws ApiException {
        String name = null;
        String namespace = null;
        IoK8sApiAppsV1beta2ReplicaSet body = null;
        String pretty = null;
        String dryRun = null;
        IoK8sApiAppsV1beta2ReplicaSet response = api.replaceAppsV1beta2NamespacedReplicaSet(name, namespace, body, pretty, dryRun);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace scale of the specified ReplicaSet
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceAppsV1beta2NamespacedReplicaSetScaleTest() throws ApiException {
        String name = null;
        String namespace = null;
        IoK8sApiAppsV1beta2Scale body = null;
        String pretty = null;
        String dryRun = null;
        IoK8sApiAppsV1beta2Scale response = api.replaceAppsV1beta2NamespacedReplicaSetScale(name, namespace, body, pretty, dryRun);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace status of the specified ReplicaSet
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceAppsV1beta2NamespacedReplicaSetStatusTest() throws ApiException {
        String name = null;
        String namespace = null;
        IoK8sApiAppsV1beta2ReplicaSet body = null;
        String pretty = null;
        String dryRun = null;
        IoK8sApiAppsV1beta2ReplicaSet response = api.replaceAppsV1beta2NamespacedReplicaSetStatus(name, namespace, body, pretty, dryRun);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace the specified StatefulSet
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceAppsV1beta2NamespacedStatefulSetTest() throws ApiException {
        String name = null;
        String namespace = null;
        IoK8sApiAppsV1beta2StatefulSet body = null;
        String pretty = null;
        String dryRun = null;
        IoK8sApiAppsV1beta2StatefulSet response = api.replaceAppsV1beta2NamespacedStatefulSet(name, namespace, body, pretty, dryRun);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace scale of the specified StatefulSet
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceAppsV1beta2NamespacedStatefulSetScaleTest() throws ApiException {
        String name = null;
        String namespace = null;
        IoK8sApiAppsV1beta2Scale body = null;
        String pretty = null;
        String dryRun = null;
        IoK8sApiAppsV1beta2Scale response = api.replaceAppsV1beta2NamespacedStatefulSetScale(name, namespace, body, pretty, dryRun);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace status of the specified StatefulSet
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceAppsV1beta2NamespacedStatefulSetStatusTest() throws ApiException {
        String name = null;
        String namespace = null;
        IoK8sApiAppsV1beta2StatefulSet body = null;
        String pretty = null;
        String dryRun = null;
        IoK8sApiAppsV1beta2StatefulSet response = api.replaceAppsV1beta2NamespacedStatefulSetStatus(name, namespace, body, pretty, dryRun);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * watch individual changes to a list of ControllerRevision. deprecated: use the &#39;watch&#39; parameter with a list operation instead.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void watchAppsV1beta2ControllerRevisionListForAllNamespacesTest() throws ApiException {
        String _continue = null;
        String fieldSelector = null;
        Boolean includeUninitialized = null;
        String labelSelector = null;
        Integer limit = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoK8sApimachineryPkgApisMetaV1WatchEvent response = api.watchAppsV1beta2ControllerRevisionListForAllNamespaces(_continue, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * watch individual changes to a list of DaemonSet. deprecated: use the &#39;watch&#39; parameter with a list operation instead.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void watchAppsV1beta2DaemonSetListForAllNamespacesTest() throws ApiException {
        String _continue = null;
        String fieldSelector = null;
        Boolean includeUninitialized = null;
        String labelSelector = null;
        Integer limit = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoK8sApimachineryPkgApisMetaV1WatchEvent response = api.watchAppsV1beta2DaemonSetListForAllNamespaces(_continue, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * watch individual changes to a list of Deployment. deprecated: use the &#39;watch&#39; parameter with a list operation instead.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void watchAppsV1beta2DeploymentListForAllNamespacesTest() throws ApiException {
        String _continue = null;
        String fieldSelector = null;
        Boolean includeUninitialized = null;
        String labelSelector = null;
        Integer limit = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoK8sApimachineryPkgApisMetaV1WatchEvent response = api.watchAppsV1beta2DeploymentListForAllNamespaces(_continue, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * watch changes to an object of kind ControllerRevision. deprecated: use the &#39;watch&#39; parameter with a list operation instead, filtered to a single item with the &#39;fieldSelector&#39; parameter.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void watchAppsV1beta2NamespacedControllerRevisionTest() throws ApiException {
        String name = null;
        String namespace = null;
        String _continue = null;
        String fieldSelector = null;
        Boolean includeUninitialized = null;
        String labelSelector = null;
        Integer limit = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoK8sApimachineryPkgApisMetaV1WatchEvent response = api.watchAppsV1beta2NamespacedControllerRevision(name, namespace, _continue, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * watch individual changes to a list of ControllerRevision. deprecated: use the &#39;watch&#39; parameter with a list operation instead.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void watchAppsV1beta2NamespacedControllerRevisionListTest() throws ApiException {
        String namespace = null;
        String _continue = null;
        String fieldSelector = null;
        Boolean includeUninitialized = null;
        String labelSelector = null;
        Integer limit = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoK8sApimachineryPkgApisMetaV1WatchEvent response = api.watchAppsV1beta2NamespacedControllerRevisionList(namespace, _continue, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * watch changes to an object of kind DaemonSet. deprecated: use the &#39;watch&#39; parameter with a list operation instead, filtered to a single item with the &#39;fieldSelector&#39; parameter.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void watchAppsV1beta2NamespacedDaemonSetTest() throws ApiException {
        String name = null;
        String namespace = null;
        String _continue = null;
        String fieldSelector = null;
        Boolean includeUninitialized = null;
        String labelSelector = null;
        Integer limit = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoK8sApimachineryPkgApisMetaV1WatchEvent response = api.watchAppsV1beta2NamespacedDaemonSet(name, namespace, _continue, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * watch individual changes to a list of DaemonSet. deprecated: use the &#39;watch&#39; parameter with a list operation instead.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void watchAppsV1beta2NamespacedDaemonSetListTest() throws ApiException {
        String namespace = null;
        String _continue = null;
        String fieldSelector = null;
        Boolean includeUninitialized = null;
        String labelSelector = null;
        Integer limit = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoK8sApimachineryPkgApisMetaV1WatchEvent response = api.watchAppsV1beta2NamespacedDaemonSetList(namespace, _continue, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * watch changes to an object of kind Deployment. deprecated: use the &#39;watch&#39; parameter with a list operation instead, filtered to a single item with the &#39;fieldSelector&#39; parameter.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void watchAppsV1beta2NamespacedDeploymentTest() throws ApiException {
        String name = null;
        String namespace = null;
        String _continue = null;
        String fieldSelector = null;
        Boolean includeUninitialized = null;
        String labelSelector = null;
        Integer limit = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoK8sApimachineryPkgApisMetaV1WatchEvent response = api.watchAppsV1beta2NamespacedDeployment(name, namespace, _continue, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * watch individual changes to a list of Deployment. deprecated: use the &#39;watch&#39; parameter with a list operation instead.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void watchAppsV1beta2NamespacedDeploymentListTest() throws ApiException {
        String namespace = null;
        String _continue = null;
        String fieldSelector = null;
        Boolean includeUninitialized = null;
        String labelSelector = null;
        Integer limit = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoK8sApimachineryPkgApisMetaV1WatchEvent response = api.watchAppsV1beta2NamespacedDeploymentList(namespace, _continue, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * watch changes to an object of kind ReplicaSet. deprecated: use the &#39;watch&#39; parameter with a list operation instead, filtered to a single item with the &#39;fieldSelector&#39; parameter.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void watchAppsV1beta2NamespacedReplicaSetTest() throws ApiException {
        String name = null;
        String namespace = null;
        String _continue = null;
        String fieldSelector = null;
        Boolean includeUninitialized = null;
        String labelSelector = null;
        Integer limit = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoK8sApimachineryPkgApisMetaV1WatchEvent response = api.watchAppsV1beta2NamespacedReplicaSet(name, namespace, _continue, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * watch individual changes to a list of ReplicaSet. deprecated: use the &#39;watch&#39; parameter with a list operation instead.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void watchAppsV1beta2NamespacedReplicaSetListTest() throws ApiException {
        String namespace = null;
        String _continue = null;
        String fieldSelector = null;
        Boolean includeUninitialized = null;
        String labelSelector = null;
        Integer limit = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoK8sApimachineryPkgApisMetaV1WatchEvent response = api.watchAppsV1beta2NamespacedReplicaSetList(namespace, _continue, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * watch changes to an object of kind StatefulSet. deprecated: use the &#39;watch&#39; parameter with a list operation instead, filtered to a single item with the &#39;fieldSelector&#39; parameter.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void watchAppsV1beta2NamespacedStatefulSetTest() throws ApiException {
        String name = null;
        String namespace = null;
        String _continue = null;
        String fieldSelector = null;
        Boolean includeUninitialized = null;
        String labelSelector = null;
        Integer limit = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoK8sApimachineryPkgApisMetaV1WatchEvent response = api.watchAppsV1beta2NamespacedStatefulSet(name, namespace, _continue, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * watch individual changes to a list of StatefulSet. deprecated: use the &#39;watch&#39; parameter with a list operation instead.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void watchAppsV1beta2NamespacedStatefulSetListTest() throws ApiException {
        String namespace = null;
        String _continue = null;
        String fieldSelector = null;
        Boolean includeUninitialized = null;
        String labelSelector = null;
        Integer limit = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoK8sApimachineryPkgApisMetaV1WatchEvent response = api.watchAppsV1beta2NamespacedStatefulSetList(namespace, _continue, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * watch individual changes to a list of ReplicaSet. deprecated: use the &#39;watch&#39; parameter with a list operation instead.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void watchAppsV1beta2ReplicaSetListForAllNamespacesTest() throws ApiException {
        String _continue = null;
        String fieldSelector = null;
        Boolean includeUninitialized = null;
        String labelSelector = null;
        Integer limit = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoK8sApimachineryPkgApisMetaV1WatchEvent response = api.watchAppsV1beta2ReplicaSetListForAllNamespaces(_continue, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * watch individual changes to a list of StatefulSet. deprecated: use the &#39;watch&#39; parameter with a list operation instead.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void watchAppsV1beta2StatefulSetListForAllNamespacesTest() throws ApiException {
        String _continue = null;
        String fieldSelector = null;
        Boolean includeUninitialized = null;
        String labelSelector = null;
        Integer limit = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        IoK8sApimachineryPkgApisMetaV1WatchEvent response = api.watchAppsV1beta2StatefulSetListForAllNamespaces(_continue, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
}
